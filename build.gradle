apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation "com.squareup.retrofit2:retrofit:2.5.0"
    implementation "com.squareup.retrofit2:converter-gson:2.5.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.5.0"
    implementation "com.squareup.okhttp3:logging-interceptor:3.12.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.0"

}

buildscript{
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies{
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.0"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:1.3.0"

        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayRepo = 'BackendProvider'
    bintrayName = 'com.sultan.utils'

    publishedGroupId = 'com.sultan.utils'
    libraryName = 'backendprovider'
    artifact = 'backendprovider'

    libraryDescription = 'A wrapper library for Retrofit. It can be used to handle the Backend API ' +
            'responses and map their value to the variables accordingly using JSON mapper or any other. ' +
            'By default, it contains the Http Interceptor which has a JSON mapper. However user can add a ' +
            'custom interceptor to handle the response and mapp them accordingly as well.'

    siteUrl = 'https://github.com/Sultan0902/stringutils'
    gitUrl = 'https://github.com/Sultan0902/stringutils.git'

    libraryVersion = '1.0.0'

    developerId = 'sultan0902'
    developerName = 'Sultan Ahmed'
    developerEmail = 'sultan_anees@yahoo.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

if(project.rootProject.file('local.properties').exists()){
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
}
